{
  "tasks": [
    {
      "id": "b3a94a5e-c712-4d29-9b39-9cf3e28dd5a7",
      "name": "Add WorkManager Dependencies and Configuration",
      "description": "Add WorkManager dependencies to the core/data module and configure proper Hilt integration for download workers. This establishes the foundation for background download processing.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-06T13:07:37.761Z",
      "updatedAt": "2025-07-06T13:10:54.872Z",
      "relatedFiles": [
        {
          "path": "core/data/build.gradle.kts",
          "type": "TO_MODIFY",
          "description": "Add WorkManager and Hilt Work dependencies"
        },
        {
          "path": "app/src/main/java/com/deadarchive/app/DeadArchiveApplication.kt",
          "type": "TO_MODIFY",
          "description": "Configure WorkManager with Hilt integration"
        }
      ],
      "implementationGuide": "1. Add WorkManager dependencies to core/data/build.gradle.kts:\\n   - androidx.work:work-runtime-ktx:2.9.0\\n   - androidx.hilt:hilt-work:1.1.0\\n   - Update kapt configuration for hilt-compiler\\n\\n2. Create WorkManager configuration class:\\n   - Extend Configuration.Provider in DeadArchiveApplication\\n   - Configure custom WorkerFactory for Hilt injection\\n   - Set concurrency limits and retry policies\\n\\n3. Add WorkManager initialization in Application class:\\n   - Initialize WorkManager with custom configuration\\n   - Ensure proper Hilt integration with @HiltAndroidApp",
      "verificationCriteria": "Dependencies resolve correctly, WorkManager initializes without errors, Hilt can inject dependencies into workers",
      "analysisResult": "Implement a comprehensive WorkManager-based download service that seamlessly integrates with the existing 90% complete download infrastructure. The solution leverages existing OkHttpClient, DownloadRepository interface, and database schema without code duplication. Implementation follows established Hilt DI patterns and Android background work best practices.",
      "summary": "Task completed successfully. Added WorkManager dependencies (androidx.work:work-runtime-ktx:2.9.0, androidx.hilt:hilt-work:1.1.0, androidx.hilt:hilt-compiler:1.1.0) to both core/data and app modules. Configured DeadArchiveApplication to implement Configuration.Provider with HiltWorkerFactory injection, custom WorkManager initialization with proper concurrency limits (20), and INFO-level logging. The implementation follows Android best practices and enables Hilt dependency injection in WorkManager workers.",
      "completedAt": "2025-07-06T13:10:54.871Z"
    },
    {
      "id": "b54bc15d-f58c-4162-a32d-6480edeb4b9f",
      "name": "Create AudioDownloadWorker Implementation",
      "description": "Implement the core download worker that handles individual track downloads using existing OkHttpClient and DownloadRepository infrastructure. Uses progress callbacks and proper error handling with retry logic.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "b3a94a5e-c712-4d29-9b39-9cf3e28dd5a7"
        }
      ],
      "createdAt": "2025-07-06T13:07:37.761Z",
      "updatedAt": "2025-07-06T13:07:37.761Z",
      "relatedFiles": [
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/download/worker/AudioDownloadWorker.kt",
          "type": "CREATE",
          "description": "Main download worker implementation"
        },
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/repository/DownloadRepository.kt",
          "type": "REFERENCE",
          "description": "Existing repository interface for download operations"
        },
        {
          "path": "core/network/src/main/java/com/deadarchive/core/network/di/NetworkModule.kt",
          "type": "REFERENCE",
          "description": "Existing OkHttpClient configuration"
        }
      ],
      "implementationGuide": "1. Create AudioDownloadWorker class in core/data/download/worker/:\\n   - Extend CoroutineWorker with @HiltWorker annotation\\n   - Use @AssistedInject for dependency injection\\n   - Inject existing DownloadRepository and OkHttpClient\\n\\n2. Implement doWork() method:\\n   - Get download parameters from inputData\\n   - Update status to DOWNLOADING via DownloadRepository\\n   - Stream download file with progress updates\\n   - Update progress via setProgressAsync() and DownloadRepository\\n   - Handle completion/failure status updates\\n\\n3. Add download file streaming logic:\\n   - Use existing OkHttpClient (no duplication)\\n   - Implement chunked reading with progress callbacks\\n   - Save to path from DownloadRepository.getDownloadDirectory()\\n   - Clean up on failure or cancellation\\n\\n4. Implement retry and error handling:\\n   - Return Result.retry() for recoverable errors\\n   - Update DownloadRepository with error messages\\n   - Respect existing retry count limits from database",
      "verificationCriteria": "Worker can download files successfully, progress updates work correctly, retry logic functions properly, integrates with existing DownloadRepository without errors",
      "analysisResult": "Implement a comprehensive WorkManager-based download service that seamlessly integrates with the existing 90% complete download infrastructure. The solution leverages existing OkHttpClient, DownloadRepository interface, and database schema without code duplication. Implementation follows established Hilt DI patterns and Android background work best practices."
    },
    {
      "id": "d647903b-3c82-4ff7-9b8e-c75f2767b10e",
      "name": "Create Download Queue Management Worker",
      "description": "Implement a periodic worker that processes the download queue by checking for queued downloads and enqueuing AudioDownloadWorkers while respecting concurrency limits and priorities.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "b54bc15d-f58c-4162-a32d-6480edeb4b9f"
        }
      ],
      "createdAt": "2025-07-06T13:07:37.761Z",
      "updatedAt": "2025-07-06T13:07:37.761Z",
      "relatedFiles": [
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/download/worker/DownloadQueueManagerWorker.kt",
          "type": "CREATE",
          "description": "Queue management worker implementation"
        },
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/repository/DownloadRepository.kt",
          "type": "REFERENCE",
          "description": "Existing queue management methods"
        }
      ],
      "implementationGuide": "1. Create DownloadQueueManagerWorker in core/data/download/worker/:\\n   - Extend CoroutineWorker with @HiltWorker\\n   - Inject DownloadRepository and WorkManager\\n   - Configure as periodic work with 15-minute intervals\\n\\n2. Implement queue processing logic:\\n   - Use DownloadRepository.getNextQueuedDownload() for priority-based selection\\n   - Check current running download count via WorkManager\\n   - Enqueue new AudioDownloadWorkers up to concurrency limit (3)\\n   - Tag workers with unique identifiers for tracking\\n\\n3. Add worker constraint and configuration:\\n   - Require CONNECTED network type\\n   - Require STORAGE_NOT_LOW\\n   - Set battery optimization policies\\n   - Configure backoff criteria for failed queue checks\\n\\n4. Implement worker lifecycle management:\\n   - Cancel workers for cancelled downloads\\n   - Update worker priorities based on queue changes\\n   - Clean up orphaned worker references",
      "verificationCriteria": "Queue processing works correctly, concurrency limits are respected, priority ordering is maintained, worker lifecycle is properly managed",
      "analysisResult": "Implement a comprehensive WorkManager-based download service that seamlessly integrates with the existing 90% complete download infrastructure. The solution leverages existing OkHttpClient, DownloadRepository interface, and database schema without code duplication. Implementation follows established Hilt DI patterns and Android background work best practices."
    },
    {
      "id": "a855d90d-ccde-40c8-9160-62864a042a27",
      "name": "Create Download Service Coordinator",
      "description": "Implement a service that coordinates download operations, manages WorkManager interactions, and provides a clean API for UI components to interact with the download system.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "d647903b-3c82-4ff7-9b8e-c75f2767b10e"
        }
      ],
      "createdAt": "2025-07-06T13:07:37.761Z",
      "updatedAt": "2025-07-06T13:07:37.761Z",
      "relatedFiles": [
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/download/service/DownloadService.kt",
          "type": "CREATE",
          "description": "Main download service coordinator"
        },
        {
          "path": "core/media/src/main/java/com/deadarchive/core/media/service/DeadArchivePlaybackService.kt",
          "type": "REFERENCE",
          "description": "Existing service pattern to follow"
        },
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/di/DataModule.kt",
          "type": "TO_MODIFY",
          "description": "Add DownloadService binding to DI module"
        }
      ],
      "implementationGuide": "1. Create DownloadService class in core/data/download/service/:\\n   - Follow existing DeadArchivePlaybackService pattern\\n   - Use @AndroidEntryPoint for Hilt injection\\n   - Inject DownloadRepository and WorkManager\\n\\n2. Implement public download management methods:\\n   - startDownload(recording, trackFilename): String\\n   - pauseDownload(downloadId): Boolean\\n   - resumeDownload(downloadId): Boolean\\n   - cancelDownload(downloadId): Boolean\\n   - startRecordingDownload(recording): List<String>\\n\\n3. Add WorkManager coordination logic:\\n   - Enqueue AudioDownloadWorkers with proper constraints\\n   - Start/stop DownloadQueueManagerWorker as needed\\n   - Handle worker tag management and tracking\\n   - Implement download operation status monitoring\\n\\n4. Create service lifecycle management:\\n   - Start as foreground service for active downloads\\n   - Show download notification following existing patterns\\n   - Handle service binding for UI components\\n   - Manage service shutdown when no active downloads",
      "verificationCriteria": "Service coordinates downloads correctly, WorkManager integration works properly, UI can interact with service successfully, foreground service lifecycle works correctly",
      "analysisResult": "Implement a comprehensive WorkManager-based download service that seamlessly integrates with the existing 90% complete download infrastructure. The solution leverages existing OkHttpClient, DownloadRepository interface, and database schema without code duplication. Implementation follows established Hilt DI patterns and Android background work best practices."
    },
    {
      "id": "8bee32e5-38a8-4f17-b9d8-6c99b9a46f0d",
      "name": "Add Download Worker Factory and Hilt Integration",
      "description": "Create the necessary Hilt integration components to enable dependency injection in WorkManager workers, including custom WorkerFactory and entry points.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "a855d90d-ccde-40c8-9160-62864a042a27"
        }
      ],
      "createdAt": "2025-07-06T13:07:37.761Z",
      "updatedAt": "2025-07-06T13:07:37.761Z",
      "relatedFiles": [
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/download/di/DownloadWorkerFactory.kt",
          "type": "CREATE",
          "description": "Worker factory for Hilt integration"
        },
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/download/di/HiltWorkerFactory.kt",
          "type": "CREATE",
          "description": "Main WorkerFactory implementation"
        },
        {
          "path": "app/src/main/java/com/deadarchive/app/DeadArchiveApplication.kt",
          "type": "TO_MODIFY",
          "description": "Configure WorkManager with custom WorkerFactory"
        }
      ],
      "implementationGuide": "1. Create DownloadWorkerFactory in core/data/download/di/:\\n   - Extend ChildWorkerFactory interface\\n   - Use @AssistedFactory for worker creation\\n   - Handle AudioDownloadWorker and DownloadQueueManagerWorker creation\\n\\n2. Create HiltWorkerFactory:\\n   - Implement androidx.work.WorkerFactory\\n   - Inject Map<Class<*>, Provider<ChildWorkerFactory>>\\n   - Route worker creation to appropriate assisted factories\\n   - Handle fallback for non-Hilt workers\\n\\n3. Add WorkerFactory entry point:\\n   - Create @EntryPoint interface for WorkManager\\n   - Define dependencies needed by workers\\n   - Install in SingletonComponent\\n   - Enable access from WorkManager context\\n\\n4. Update WorkManager configuration:\\n   - Set custom WorkerFactory in WorkManager.Configuration\\n   - Ensure proper Hilt component initialization\\n   - Configure worker creation and lifecycle management",
      "verificationCriteria": "WorkManager can create workers with Hilt injection, dependencies are properly injected into workers, worker creation follows Hilt patterns correctly",
      "analysisResult": "Implement a comprehensive WorkManager-based download service that seamlessly integrates with the existing 90% complete download infrastructure. The solution leverages existing OkHttpClient, DownloadRepository interface, and database schema without code duplication. Implementation follows established Hilt DI patterns and Android background work best practices."
    },
    {
      "id": "2792e1e5-c24e-489b-90ba-dcf1857e8e95",
      "name": "Add Download Cleanup and Retry Worker",
      "description": "Implement a periodic maintenance worker that handles cleanup of incomplete downloads, automatic retry of failed downloads, and storage space management.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "8bee32e5-38a8-4f17-b9d8-6c99b9a46f0d"
        }
      ],
      "createdAt": "2025-07-06T13:07:37.761Z",
      "updatedAt": "2025-07-06T13:07:37.761Z",
      "relatedFiles": [
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/download/worker/DownloadCleanupWorker.kt",
          "type": "CREATE",
          "description": "Cleanup and retry worker implementation"
        },
        {
          "path": "core/data/src/main/java/com/deadarchive/core/data/repository/DownloadRepository.kt",
          "type": "REFERENCE",
          "description": "Existing cleanup and retry methods"
        }
      ],
      "implementationGuide": "1. Create DownloadCleanupWorker in core/data/download/worker/:\\n   - Extend CoroutineWorker with @HiltWorker\\n   - Configure as periodic work (daily execution)\\n   - Inject DownloadRepository for cleanup operations\\n\\n2. Implement cleanup logic:\\n   - Use DownloadRepository.cleanupIncompleteDownloads()\\n   - Remove orphaned files from download directory\\n   - Clean up cancelled/failed downloads older than 7 days\\n   - Update database to remove stale download records\\n\\n3. Add automatic retry functionality:\\n   - Use DownloadRepository.autoRetryDownloads(maxRetries: 3)\\n   - Implement exponential backoff for retry attempts\\n   - Reset retry counts for successful downloads\\n   - Log retry attempts for debugging\\n\\n4. Implement storage management:\\n   - Check available storage space\\n   - Pause downloads if storage is critically low\\n   - Generate storage usage reports\\n   - Clean up oldest completed downloads if needed\\n\\n5. Add worker scheduling and constraints:\\n   - Schedule during device idle time\\n   - Require device charging for intensive cleanup\\n   - Skip cleanup if device is in battery saver mode",
      "verificationCriteria": "Cleanup worker runs successfully, orphaned files are removed, failed downloads are retried automatically, storage management works correctly",
      "analysisResult": "Implement a comprehensive WorkManager-based download service that seamlessly integrates with the existing 90% complete download infrastructure. The solution leverages existing OkHttpClient, DownloadRepository interface, and database schema without code duplication. Implementation follows established Hilt DI patterns and Android background work best practices."
    },
    {
      "id": "64468567-2d4d-453d-95e4-c6554b83ccb6",
      "name": "Update Application Manifest and Permissions",
      "description": "Add necessary Android manifest entries for WorkManager, download service, and required permissions for file download and storage access.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "2792e1e5-c24e-489b-90ba-dcf1857e8e95"
        }
      ],
      "createdAt": "2025-07-06T13:07:37.761Z",
      "updatedAt": "2025-07-06T13:07:37.761Z",
      "relatedFiles": [
        {
          "path": "app/src/main/AndroidManifest.xml",
          "type": "TO_MODIFY",
          "description": "Add permissions and service declarations"
        },
        {
          "path": "app/proguard-rules.pro",
          "type": "TO_MODIFY",
          "description": "Add WorkManager ProGuard rules"
        }
      ],
      "implementationGuide": "1. Add required permissions to AndroidManifest.xml:\\n   - INTERNET (for downloading files)\\n   - WRITE_EXTERNAL_STORAGE (for saving downloads)\\n   - WAKE_LOCK (for background processing)\\n   - FOREGROUND_SERVICE (for download notifications)\\n   - REQUEST_INSTALL_PACKAGES (if needed for APK downloads)\\n\\n2. Register DownloadService in manifest:\\n   - Add service declaration with proper intent filters\\n   - Set exported=false for security\\n   - Configure foreground service type\\n   - Add proper service categories\\n\\n3. Configure WorkManager in manifest:\\n   - Add WorkManagerInitializer provider\\n   - Set tools:node=remove for default initializer\\n   - Configure custom initialization\\n\\n4. Add network security configuration:\\n   - Allow cleartext HTTP for Archive.org if needed\\n   - Configure certificate pinning for security\\n   - Set proper network security policies\\n\\n5. Update build configuration:\\n   - Add necessary build features\\n   - Configure proper ProGuard rules for WorkManager\\n   - Ensure proper R8 optimization settings",
      "verificationCriteria": "App has proper permissions for downloading, service is registered correctly, WorkManager initializes properly, no security issues in manifest",
      "analysisResult": "Implement a comprehensive WorkManager-based download service that seamlessly integrates with the existing 90% complete download infrastructure. The solution leverages existing OkHttpClient, DownloadRepository interface, and database schema without code duplication. Implementation follows established Hilt DI patterns and Android background work best practices."
    },
    {
      "id": "d3dff05a-a3c9-40f9-a5ab-b21da7217070",
      "name": "Create Download Integration Tests",
      "description": "Implement comprehensive integration tests for the download system, including worker functionality, service coordination, and repository integration.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "64468567-2d4d-453d-95e4-c6554b83ccb6"
        }
      ],
      "createdAt": "2025-07-06T13:07:37.761Z",
      "updatedAt": "2025-07-06T13:07:37.761Z",
      "relatedFiles": [
        {
          "path": "core/data/src/test/java/com/deadarchive/core/data/download/worker/AudioDownloadWorkerTest.kt",
          "type": "CREATE",
          "description": "Unit tests for download worker"
        },
        {
          "path": "core/data/src/test/java/com/deadarchive/core/data/download/service/DownloadServiceTest.kt",
          "type": "CREATE",
          "description": "Unit tests for download service"
        },
        {
          "path": "core/data/src/androidTest/java/com/deadarchive/core/data/download/DownloadIntegrationTest.kt",
          "type": "CREATE",
          "description": "Integration tests for complete download flow"
        }
      ],
      "implementationGuide": "1. Create AudioDownloadWorkerTest in core/data/src/test/:\\n   - Test worker execution with mock dependencies\\n   - Verify progress updates and status changes\\n   - Test error handling and retry logic\\n   - Mock OkHttpClient and DownloadRepository\\n\\n2. Create DownloadServiceTest:\\n   - Test service coordination of multiple downloads\\n   - Verify WorkManager integration\\n   - Test foreground service lifecycle\\n   - Mock WorkManager operations\\n\\n3. Add DownloadQueueManagerWorkerTest:\\n   - Test queue processing logic\\n   - Verify concurrency limit enforcement\\n   - Test priority-based download ordering\\n   - Mock DownloadRepository queue methods\\n\\n4. Create integration test for full download flow:\\n   - Test complete download from start to finish\\n   - Verify file system operations\\n   - Test database state consistency\\n   - Use TestDispatcher for coroutine testing\\n\\n5. Add performance and stress tests:\\n   - Test concurrent download limits\\n   - Verify memory usage during downloads\\n   - Test storage space handling\\n   - Validate cleanup operations\\n\\n6. Configure test environment:\\n   - Set up proper test doubles and mocks\\n   - Configure test WorkManager instance\\n   - Use test database for integration tests\\n   - Add proper test cleanup procedures",
      "verificationCriteria": "All tests pass successfully, test coverage is comprehensive, integration tests verify end-to-end functionality, performance tests validate resource usage",
      "analysisResult": "Implement a comprehensive WorkManager-based download service that seamlessly integrates with the existing 90% complete download infrastructure. The solution leverages existing OkHttpClient, DownloadRepository interface, and database schema without code duplication. Implementation follows established Hilt DI patterns and Android background work best practices."
    }
  ]
}