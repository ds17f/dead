{
  "tasks": [
    {
      "id": "9d9e18c6-d710-4420-8953-98208149678c",
      "name": "Enhance MediaControllerRepository for proper queue handling",
      "description": "Fix MediaController queue synchronization with PlayerViewModel to enable proper forward/back buttons in notifications and native Media3 queue management. This addresses the core issue of media controls showing only back button.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-01T16:14:26.830Z",
      "updatedAt": "2025-07-01T16:25:12.654Z",
      "relatedFiles": [
        {
          "path": "core/media/src/main/java/com/deadarchive/core/media/player/MediaControllerRepository.kt",
          "type": "TO_MODIFY",
          "description": "Add queue synchronization and MediaController.setMediaItems() support",
          "lineStart": 287,
          "lineEnd": 358
        },
        {
          "path": "core/media/src/main/java/com/deadarchive/core/media/service/DeadArchivePlaybackService.kt",
          "type": "REFERENCE",
          "description": "MediaSessionService for queue-based playback integration"
        }
      ],
      "implementationGuide": "1. Modify MediaControllerRepository.playTrack() to also call controller.setMediaItems() with queue context when available\\n2. Add queue synchronization logic in MediaControllerRepository to observe PlayerViewModel queue state\\n3. Ensure MediaController.setMediaItems() is called whenever queue changes\\n4. Add proper queue-based next/previous logic using MediaController native methods\\n5. Verify MediaSession callbacks properly handle queue-based navigation",
      "verificationCriteria": "MediaController.setMediaItems() is called when queue changes, notification shows forward/back buttons when queue has multiple items, native Media3 queue navigation works properly",
      "analysisResult": "Based on analysis of the Dead Archive Android codebase, the queue system implementation should leverage existing PlayerViewModel playlist infrastructure and MediaControllerRepository patterns. The solution focuses on enhancing existing functionality rather than creating duplicate systems, ensuring proper media control cooperation and queue-based playback.",
      "summary": "Successfully enhanced MediaControllerRepository with proper queue handling and synchronized PlayerViewModel to provide queue context. Key improvements include: 1) Added updateQueueContext() method to MediaControllerRepository for queue synchronization 2) Modified playTrack() to use queue-based playback with MediaController.setMediaItems() when queue context is available 3) Enhanced skipToNext/skipToPrevious methods to be queue-aware with proper state tracking 4) Updated PlayerViewModel to call updateQueueContext() whenever playlist changes 5) All playlist operations (setPlaylist, addToPlaylist, removeFromPlaylist, clearPlaylist) now properly sync with MediaControllerRepository queue state. This addresses the core issue of media controls showing only back button by ensuring MediaController receives proper queue context for native Media3 playlist management.",
      "completedAt": "2025-07-01T16:25:12.654Z"
    },
    {
      "id": "ea596bcd-acca-4d78-8f78-ebab2d325de0",
      "name": "Create QueueScreen UI component",
      "description": "Build a dedicated queue viewing and management screen following existing Compose patterns. This screen should be accessible from PlayerScreen 3-dots menu and provide queue reordering, removal, and management capabilities.",
      "status": "in_progress",
      "dependencies": [
        {
          "taskId": "9d9e18c6-d710-4420-8953-98208149678c"
        }
      ],
      "createdAt": "2025-07-01T16:14:26.830Z",
      "updatedAt": "2025-07-01T16:34:03.351Z",
      "relatedFiles": [
        {
          "path": "feature/player/src/main/java/com/deadarchive/feature/player/QueueScreen.kt",
          "type": "CREATE",
          "description": "New Compose screen for queue viewing and management"
        },
        {
          "path": "feature/player/src/main/java/com/deadarchive/feature/player/PlayerScreen.kt",
          "type": "TO_MODIFY",
          "description": "Add queue access to 3-dots menu",
          "lineStart": 1,
          "lineEnd": 50
        },
        {
          "path": "feature/playlist/src/main/java/com/deadarchive/feature/playlist/PlaylistScreen.kt",
          "type": "REFERENCE",
          "description": "Reference for UI patterns and track listing components"
        }
      ],
      "implementationGuide": "1. Create QueueScreen.kt in feature/player following PlayerScreen patterns\\n2. Use LazyColumn with drag-to-reorder functionality for queue items\\n3. Add queue management actions (remove, reorder, clear queue)\\n4. Follow existing Material3 design system and card-based layouts\\n5. Integrate with existing navigation patterns using NavController\\n6. Add queue access option to PlayerScreen 3-dots menu",
      "verificationCriteria": "QueueScreen displays current queue items, allows reordering and removal, accessible from PlayerScreen menu, follows Material3 design patterns",
      "analysisResult": "Based on analysis of the Dead Archive Android codebase, the queue system implementation should leverage existing PlayerViewModel playlist infrastructure and MediaControllerRepository patterns. The solution focuses on enhancing existing functionality rather than creating duplicate systems, ensuring proper media control cooperation and queue-based playback."
    },
    {
      "id": "29214f11-77eb-4776-b765-bcdbabb0a81b",
      "name": "Enhance PlayerViewModel queue state management",
      "description": "Improve existing playlist functionality in PlayerViewModel to better serve as queue system. Rename playlist-related properties to queue terminology and add proper queue state synchronization with MediaControllerRepository.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "9d9e18c6-d710-4420-8953-98208149678c"
        }
      ],
      "createdAt": "2025-07-01T16:14:26.830Z",
      "updatedAt": "2025-07-01T16:14:26.830Z",
      "relatedFiles": [
        {
          "path": "feature/player/src/main/java/com/deadarchive/feature/player/PlayerViewModel.kt",
          "type": "TO_MODIFY",
          "description": "Enhance existing playlist/queue functionality",
          "lineStart": 32,
          "lineEnd": 404
        },
        {
          "path": "core/model/src/main/java/com/deadarchive/core/model/PlaylistItem.kt",
          "type": "REFERENCE",
          "description": "Data model for queue items"
        }
      ],
      "implementationGuide": "1. Rename _currentPlaylist to _currentQueue for clarity\\n2. Add queue-specific UI state properties (queuePosition, queueSize, hasNext/hasPrevious)\\n3. Enhance queue operations (addToQueue, removeFromQueue, reorderQueue)\\n4. Improve queue synchronization with MediaControllerRepository currentTrackUrl\\n5. Add queue persistence state for UI consistency\\n6. Ensure proper queue state updates when tracks change",
      "verificationCriteria": "PlayerViewModel queue state properly syncs with service, queue operations work correctly, UI views cooperate through shared queue state",
      "analysisResult": "Based on analysis of the Dead Archive Android codebase, the queue system implementation should leverage existing PlayerViewModel playlist infrastructure and MediaControllerRepository patterns. The solution focuses on enhancing existing functionality rather than creating duplicate systems, ensuring proper media control cooperation and queue-based playback."
    },
    {
      "id": "33c7e433-6dfb-4246-a2cf-5c6c2c52d68e",
      "name": "Add queue persistence with Room database",
      "description": "Implement queue persistence using Room database to maintain queue state across app restarts. This ensures queue continuity and proper restoration of playback state.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "29214f11-77eb-4776-b765-bcdbabb0a81b"
        }
      ],
      "createdAt": "2025-07-01T16:14:26.830Z",
      "updatedAt": "2025-07-01T16:14:26.830Z",
      "relatedFiles": [
        {
          "path": "core/database/src/main/java/com/deadarchive/core/database/entity/QueueEntity.kt",
          "type": "CREATE",
          "description": "Room entity for queue persistence"
        },
        {
          "path": "core/database/src/main/java/com/deadarchive/core/database/dao/QueueDao.kt",
          "type": "CREATE",
          "description": "DAO for queue operations"
        },
        {
          "path": "core/database/src/main/java/com/deadarchive/core/database/DeadArchiveDatabase.kt",
          "type": "TO_MODIFY",
          "description": "Add queue table to database",
          "lineStart": 15,
          "lineEnd": 40
        },
        {
          "path": "core/database/src/main/java/com/deadarchive/core/database/entity/ConcertEntity.kt",
          "type": "REFERENCE",
          "description": "Reference for entity patterns and type converters"
        }
      ],
      "implementationGuide": "1. Create QueueEntity in core/database following existing entity patterns\\n2. Create QueueDao with queue operations (insert, delete, reorder, clear)\\n3. Add queue table to DeadArchiveDatabase\\n4. Implement queue persistence in PlayerViewModel using repository pattern\\n5. Add queue restoration logic on app startup\\n6. Follow existing database patterns with type converters for complex data",
      "verificationCriteria": "Queue state persists across app restarts, queue operations are properly saved to database, queue restoration works on app startup",
      "analysisResult": "Based on analysis of the Dead Archive Android codebase, the queue system implementation should leverage existing PlayerViewModel playlist infrastructure and MediaControllerRepository patterns. The solution focuses on enhancing existing functionality rather than creating duplicate systems, ensuring proper media control cooperation and queue-based playback."
    },
    {
      "id": "417ce6b4-72d0-4d9c-9239-1675d9c2ca48",
      "name": "Integrate queue system with existing screens",
      "description": "Update PlaylistScreen and other relevant screens to properly add tracks to the queue system. Ensure all track selection flows properly populate the queue for consistent playback behavior.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "ea596bcd-acca-4d78-8f78-ebab2d325de0"
        },
        {
          "taskId": "29214f11-77eb-4776-b765-bcdbabb0a81b"
        }
      ],
      "createdAt": "2025-07-01T16:14:26.830Z",
      "updatedAt": "2025-07-01T16:14:26.830Z",
      "relatedFiles": [
        {
          "path": "feature/playlist/src/main/java/com/deadarchive/feature/playlist/PlaylistScreen.kt",
          "type": "TO_MODIFY",
          "description": "Update to integrate with queue system",
          "lineStart": 1,
          "lineEnd": 100
        },
        {
          "path": "feature/playlist/src/main/java/com/deadarchive/feature/playlist/PlaylistViewModel.kt",
          "type": "TO_MODIFY",
          "description": "Add queue integration logic"
        },
        {
          "path": "feature/player/src/main/java/com/deadarchive/feature/player/components/MiniPlayer.kt",
          "type": "REFERENCE",
          "description": "Update to reflect queue state"
        }
      ],
      "implementationGuide": "1. Update PlaylistScreen to add entire concert/show to queue when track is selected\\n2. Modify track selection logic to use queue-based playback\\n3. Add queue management actions to relevant screens (add to queue, play next)\\n4. Ensure MiniPlayer properly reflects queue state\\n5. Update navigation flows to maintain queue context\\n6. Add queue status indicators where appropriate",
      "verificationCriteria": "All screens properly add tracks to queue, track selection flows work consistently, MiniPlayer reflects queue state, navigation maintains queue context",
      "analysisResult": "Based on analysis of the Dead Archive Android codebase, the queue system implementation should leverage existing PlayerViewModel playlist infrastructure and MediaControllerRepository patterns. The solution focuses on enhancing existing functionality rather than creating duplicate systems, ensuring proper media control cooperation and queue-based playback."
    }
  ]
}