name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'  # Release tags like v1.0.0
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: 'manual'

permissions:
  contents: write  # Needed for releases
  actions: read
  packages: write
  pull-requests: write  # Needed for PR comments

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    
    - name: Set up JDK 17
      uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@9fc6c4e9069bf8d3d10b2204b1fb8f6ef7065407 # v3.2.2
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@a8f75513eafdebd8141bd1cd4e30fcd194af8dfa # v2.12.0
      with:
        gradle-version: 8.7
    
    # Disable cache temporarily as it's causing 503 errors
    # - name: Cache Gradle dependencies
    #   uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
    #   with:
    #     path: |
    #       ~/.gradle/caches
    #       ~/.gradle/wrapper
    #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
    #     restore-keys: |
    #       ${{ runner.os }}-gradle-
    
    - name: Accept Android SDK licenses
      run: yes | sdkmanager --licenses || true
    
    - name: Fix Gradle Wrapper
      run: |
        echo "🔧 Fixing corrupted Gradle wrapper..."
        
        # Remove corrupted wrapper jar
        rm -f gradle/wrapper/gradle-wrapper.jar
        
        # Use system gradle to regenerate wrapper
        gradle wrapper --gradle-version=8.7
        
        # Make gradlew executable
        chmod +x gradlew
        
        # Verify wrapper works
        ./gradlew --version
        
        echo "✅ Gradle wrapper fixed!"
    
    # Tests temporarily disabled due to model refactoring
    # - name: Run unit tests
    #   run: ./gradlew test --no-daemon --stacktrace
    
    # - name: Run lint checks
    #   run: ./gradlew lint --no-daemon --stacktrace
    
    # Build APKs based on context (debug for PR/push, release APK+AAB for tags)
    - name: Build Android Artifacts
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_FILE }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "🏷️ Tag detected - building release APK and AAB..."
          
          # Create signing configuration for release builds
          echo "🔐 Setting up signing configuration..."
          
          # Decode keystore
          if [ -n "$KEYSTORE_BASE64" ]; then
            echo "$KEYSTORE_BASE64" | base64 -d > release.keystore
            echo "✅ Keystore decoded ($(stat -c%s release.keystore 2>/dev/null || stat -f%z release.keystore) bytes)"
          else
            echo "❌ KEYSTORE_BASE64 not available"
            exit 1
          fi
          
          # Create signing.properties
          if [ -n "$KEYSTORE_PASSWORD" ] && [ -n "$KEY_ALIAS" ] && [ -n "$KEY_PASSWORD" ]; then
            {
              echo "storeFile=../release.keystore"
              echo "storePassword=$KEYSTORE_PASSWORD"
              echo "keyAlias=$KEY_ALIAS"
              echo "keyPassword=$KEY_PASSWORD"
            } > signing.properties
            echo "✅ signing.properties created (keystore path: ../release.keystore)"
          else
            echo "❌ Missing signing credentials"
            exit 1
          fi
          
          # Build release artifacts
          ./gradlew clean assembleRelease bundleRelease --no-daemon --stacktrace
          
          # Verify signing worked
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "✅ Signed APK produced: $(ls -lh app/build/outputs/apk/release/app-release.apk | awk '{print $5}')"
            # Verify signature
            if jarsigner -verify app/build/outputs/apk/release/app-release.apk; then
              echo "✅ APK signature verified"
            else
              echo "❌ APK signature verification failed"
              exit 1
            fi
          elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "❌ Only unsigned APK was produced - signing failed"
            exit 1
          else
            echo "❌ No APK found"
            exit 1
          fi
          
          # Cleanup sensitive files
          rm -f release.keystore signing.properties
          echo "✅ Release builds completed and cleaned up"
        else
          echo "🔨 Building debug APK for CI"
          ./gradlew assembleDebug --no-daemon --stacktrace
          echo "✅ Debug build completed"
        fi
    
    # Debug GitHub context for troubleshooting  
    - name: Debug GitHub Context
      run: |
        echo "🔍 GitHub Context Debug Info:"
        echo "- github.ref: ${{ github.ref }}"
        echo "- github.ref_type: ${{ github.ref_type }}"
        echo "- github.ref_name: ${{ github.ref_name }}"
        echo "- github.event_name: ${{ github.event_name }}"
        echo "- Tag detected (ref_type): ${{ github.ref_type == 'tag' }}"
        echo "- Tag detected (startsWith): ${{ startsWith(github.ref, 'refs/tags/') }}"
        echo "- Will run signing steps: ${{ startsWith(github.ref, 'refs/tags/') }}"
    
    - name: Get APK Info
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Release build info
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            APK_FILE="app/build/outputs/apk/release/app-release.apk"
          elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            APK_FILE="app/build/outputs/apk/release/app-release-unsigned.apk"
          else
            echo "❌ No release APK file found"
            exit 1
          fi
          
          APK_SIZE=$(ls -lh "$APK_FILE" | awk '{print $5}')
          AAB_SIZE=$(ls -lh app/build/outputs/bundle/release/app-release.aab | awk '{print $5}')
          echo "📦 Release APK Size: $APK_SIZE"
          echo "📦 AAB Size: $AAB_SIZE"
          
          # Get version info
          AAPT_PATH=$(find $ANDROID_HOME/build-tools -name "aapt" | head -1)
          if [ -n "$AAPT_PATH" ]; then
            $AAPT_PATH dump badging "$APK_FILE" | grep -E "(package|application-label)"
          else
            echo "⚠️ aapt not found - skipping version info"
          fi
        else
          # Debug build info
          APK_FILE="app/build/outputs/apk/debug/app-debug.apk"
          if [ -f "$APK_FILE" ]; then
            APK_SIZE=$(ls -lh "$APK_FILE" | awk '{print $5}')
            echo "📦 Debug APK Size: $APK_SIZE"
            AAPT_PATH=$(find $ANDROID_HOME/build-tools -name "aapt" | head -1)
            if [ -n "$AAPT_PATH" ]; then
              $AAPT_PATH dump badging "$APK_FILE" | grep -E "(package|application-label)"
            else
              echo "⚠️ aapt not found - skipping version info"
            fi
          else
            echo "❌ Debug APK not found"
          fi
        fi
    
    # Test reporting (disabled while tests are being refactored)
    - name: Generate test report
      if: always()
      run: |
        echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ Tests temporarily disabled during model refactoring" >> $GITHUB_STEP_SUMMARY
        
    - name: Generate lint report
      if: always()
      run: |
        echo "## 🔍 Code Quality" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ Lint checks temporarily disabled during model refactoring" >> $GITHUB_STEP_SUMMARY
    
    
    # Upload artifacts conditionally
    - name: Upload Debug APK
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: pr-build-${{ github.event.number }}
        path: |
          app/build/outputs/apk/debug/app-debug.apk
          app/build/reports/lint-results*.html
          app/build/reports/tests/
        retention-days: 7
    
    - name: Upload Release APK
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: dead-archive-${{ github.ref_name }}-release
        path: app/build/outputs/apk/release/app-release*.apk
        retention-days: 30
    
    - name: Upload Release AAB
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: dead-archive-${{ github.ref_name }}-aab
        path: app/build/outputs/bundle/release/app-release.aab
        retention-days: 30
    
    - name: Upload Mapping Files
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: dead-archive-${{ github.ref_name }}-mapping
        path: app/build/outputs/mapping/release/
        retention-days: 90
    
    # PR comment (for PRs only)
    - name: Comment PR results
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🤖 Automated Build Results\n\n';
          
          // Check if build succeeded
          if (context.job.status === 'success') {
            comment += '✅ **Build**: Success\n';
            comment += '⚠️ **Tests**: Temporarily disabled during refactoring\n';
            comment += '⚠️ **Lint**: Temporarily disabled during refactoring\n\n';
            comment += '📱 Debug APK built and ready for testing.\n';
          } else {
            comment += '❌ **Build**: Failed\n\n';
            comment += '🔍 Check the workflow logs for details.\n';
          }
          
          comment += '\n---\n';
          comment += `**Commit**: ${context.sha.substring(0, 8)}\n`;
          comment += `**Workflow**: [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    # Rename release files with proper naming convention
    - name: Rename release files
      if: github.ref_type == 'tag'
      run: |
        echo "🏷️ Renaming release files to follow naming convention..."
        # Get the version from the tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Create directory for renamed files
        mkdir -p renamed-artifacts
        
        # Check for APK and copy if found
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo "📦 Found signed APK, renaming..."
          cp "app/build/outputs/apk/release/app-release.apk" "renamed-artifacts/dead-archive-$VERSION-release.apk"
        elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          echo "⚠️ Found unsigned APK - this should not happen with signing enabled"
          echo "⚠️ Skipping APK renaming as it should be signed"
        else
          echo "❌ No APK file found - build may have failed"
          exit 1
        fi
        
        # Check for AAB and copy if found
        if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
          echo "📦 Found AAB, renaming..."
          cp "app/build/outputs/bundle/release/app-release.aab" "renamed-artifacts/dead-archive-$VERSION-release.aab"
        else
          echo "❌ No AAB file found - build may have failed"
          exit 1
        fi
        
        echo "✅ Files renamed successfully:"
        ls -la renamed-artifacts/
        
        # Verify the renamed files
        if [ ! -f "renamed-artifacts/dead-archive-$VERSION-release.apk" ] || [ ! -f "renamed-artifacts/dead-archive-$VERSION-release.aab" ]; then
          echo "❌ Failed to rename files properly"
          exit 1
        fi
        
    # Create GitHub Release (for tags only)
    - name: Create Release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        files: |
          renamed-artifacts/dead-archive-*-release.apk
          renamed-artifacts/dead-archive-*-release.aab
        body: |
          🎸 Dead Archive Release Build
          
          **Download:**
          - **APK**: Direct installation file for Android devices  
          - **AAB**: For Google Play Store upload
          
          **Changes in this release:**
          
          ${{ github.event.head_commit.message }}
          
          **Testing:**
          ```bash
          adb install -r dead-archive-${{ github.ref_name }}-release.apk
          ```
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}