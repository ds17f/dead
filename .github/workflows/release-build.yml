name: Build Release APK

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: 'manual'

permissions:
  contents: read
  actions: read
  packages: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    
    - name: Set up JDK 17
      uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@9fc6c4e9069bf8d3d10b2204b1fb8f6ef7065407 # v3.2.2
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@a8f75513eafdebd8141bd1cd4e30fcd194af8dfa # v2.12.0
      with:
        gradle-version: 8.7
    
    - name: Cache Gradle dependencies
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Decode Keystore
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_FILE }}
      run: |
        echo "🔐 Decoding keystore from base64..."
        echo "$KEYSTORE_BASE64" | base64 -d > release.keystore
        
        # Verify keystore exists without showing details
        if [ -f "release.keystore" ]; then
          echo "✅ Keystore file created successfully"
          echo "📏 Size: $(stat -f%z release.keystore 2>/dev/null || stat -c%s release.keystore) bytes"
        else
          echo "❌ Failed to create keystore file"
          exit 1
        fi
    
    - name: Create gradle.properties
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "📝 Creating gradle.properties with signing configuration..."
        
        # Create gradle.properties without echoing secrets
        {
          echo "org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8"
          echo "org.gradle.parallel=true"
          echo "org.gradle.configureondemand=true"
          echo "org.gradle.caching=true"
          echo "android.useAndroidX=true"
          echo "android.enableJetifier=true"
          echo "android.nonTransitiveRClass=true"
          echo ""
          echo "# Release signing"
          echo "RELEASE_STORE_FILE=release.keystore"
          echo "RELEASE_STORE_PASSWORD=${KEYSTORE_PASSWORD}"
          echo "RELEASE_KEY_ALIAS=${KEY_ALIAS}"
          echo "RELEASE_KEY_PASSWORD=${KEY_PASSWORD}"
        } > gradle.properties
        
        echo "✅ gradle.properties created with $(wc -l < gradle.properties) lines"
    
    - name: Fix Gradle Wrapper
      run: |
        echo "🔧 Fixing corrupted Gradle wrapper..."
        
        # Remove corrupted wrapper jar
        rm -f gradle/wrapper/gradle-wrapper.jar
        
        # Use system gradle to regenerate wrapper
        gradle wrapper --gradle-version=8.7
        
        # Make gradlew executable
        chmod +x gradlew
        
        # Verify wrapper works
        ./gradlew --version
        
        echo "✅ Gradle wrapper fixed!"
    
    - name: Build Release APK
      run: ./gradlew assembleRelease --no-daemon --stacktrace
    
    - name: Build Release AAB
      run: ./gradlew bundleRelease --no-daemon --stacktrace
    
    - name: Verify APK Signature
      run: |
        echo "🔍 Checking for APK files..."
        ls -la app/build/outputs/apk/release/
        
        # Check for signed APK first, then unsigned
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo "📱 Found signed APK: app-release.apk"
          APK_FILE="app/build/outputs/apk/release/app-release.apk"
          jarsigner -verify -verbose "$APK_FILE"
          echo "✅ APK is properly signed!"
        elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          echo "📱 Found unsigned APK: app-release-unsigned.apk"
          APK_FILE="app/build/outputs/apk/release/app-release-unsigned.apk"
          echo "⚠️ APK is unsigned - signing configuration may be missing"
        else
          echo "❌ No APK file found in expected location"
          exit 1
        fi
    
    - name: Get APK Info
      run: |
        # Detect which APK was built
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          APK_FILE="app/build/outputs/apk/release/app-release.apk"
        elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          APK_FILE="app/build/outputs/apk/release/app-release-unsigned.apk"
        else
          echo "❌ No APK file found"
          exit 1
        fi
        
        APK_SIZE=$(ls -lh "$APK_FILE" | awk '{print $5}')
        AAB_SIZE=$(ls -lh app/build/outputs/bundle/release/app-release.aab | awk '{print $5}')
        echo "📦 APK Size: $APK_SIZE"
        echo "📦 AAB Size: $AAB_SIZE"
        
        # Get version info
        aapt dump badging "$APK_FILE" | grep -E "(package|application-label)"
    
    - name: Clean up sensitive files
      if: always()
      run: |
        echo "🧹 Cleaning up sensitive files..."
        rm -f release.keystore gradle.properties
        echo "✅ Cleanup complete"
    
    - name: Upload Release APK
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: dead-archive-apk-${{ github.sha }}
        path: app/build/outputs/apk/release/app-release*.apk
        retention-days: 30
    
    - name: Upload Release AAB
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: dead-archive-aab-${{ github.sha }}
        path: app/build/outputs/bundle/release/app-release.aab
        retention-days: 30
    
    - name: Upload Mapping Files
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: dead-archive-mapping-${{ github.sha }}
        path: app/build/outputs/mapping/release/
        retention-days: 90
    
    # Optional: Create GitHub Release
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        files: |
          app/build/outputs/apk/release/app-release*.apk
          app/build/outputs/bundle/release/app-release.aab
        body: |
          🎸 Dead Archive Release Build
          
          **Changes in this release:**
          - Archive.org API integration complete
          - Network layer with robust JSON parsing
          - Modern Android architecture (MVVM, Jetpack Compose)
          
          **Download:**
          - **APK**: Direct installation file
          - **AAB**: For Google Play Store upload
          
          **Testing:**
          ```bash
          adb install -r app-release.apk
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}